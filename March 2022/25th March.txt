https://leetcode.com/problems/two-city-scheduling/

1029. Two City Scheduling

Greedy 

Intuition : 
ntuition :
• Fill a diff[] (array) that stores cityB-cityA for every
person
• sort diff[] in asc.
• Calculate 'totalCityACost' for all persons
Add 1st half values from diff[] to 'totalCityACost'
• return 'totalCityACost'

// order by savings if I choose b


class Solution {
    public int twoCitySchedCost(int[][] costs) {
        Arrays.sort(costs, (a, b) -> {
            return (a[0] - a[1]) - (b[0] - b[1]);
        });
        
        int price = 0;
        for(int i = 0; i < costs.length / 2; i++){
            price += costs[i][0];
        }
        for(int i = costs.length / 2; i < costs.length; i++){
            price += costs[i][1];
        }
        return price;
    }
}

class Solution {
public int twoCitySchedCost(int[][] costs) {
// order by savings if I choose b
Arrays.sort(costs, (p1, p2)-> (p1[0] - p1[1]) - (p2[0] - p2[1]));
int n = costs.length/2;
int total = 0;
for(int[] person : costs){
if(n-- > 0)
total += person[0];
else
total += person[1];
}
return total;
}
}

