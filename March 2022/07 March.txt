Merge Two Sorted Lists
https://leetcode.com/problems/merge-two-sorted-lists/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 //TC:O(n+m)
 
 //SC :O(1)
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyNode=new ListNode(-1);
        if(list1== null )
            return list2;
        if(list2==null)
            return list1;
        ListNode it=dummyNode;
        ListNode it1=list1;
        ListNode it2=list2;
        
        while(it1!=null && it2!=null)
        {
            if(it1.val<it2.val){
                it.next=it1;
                it1=it1.next;
                it=it.next;
            }
            else if(it1.val == it2.val){
                it.next=it1;
                it1=it1.next;
                it=it.next;
            }
            else if(it1.val >it2.val){
                it.next=it2;
                it2=it2.next;
                it=it.next;
            }
        }
        
        while(it1!=null)
        {
            it.next=it1;
            it1=it1.next;
            it=it.next;
        }
        while(it2!=null)
        {
            it.next=it2;
            it2=it2.next;
            it=it.next;
        }
        return dummyNode.next;
    }
}

//Method 2: Using Recursion

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null) return list2;
        if(list2 == null) return list1;
        
        if(list1.val < list2.val) {
            list1.next = mergeTwoLists(list1.next,list2);
            return list1;
        }
        else {
            list2.next = mergeTwoLists(list1,list2.next);
            return list2;
        }
    }
}



Learning today : 

Even though the time taken is different but relationship between the size and the time is same ie. Linear.
but the Time complexcity is thes graph, it is this
mathematical function which tells how the time is going grow to as the input grows.
what do we need to consider when thinking
about complecity?
1. Always look for worst case complerily
2. Always look at complerity for large/o data
