https://leetcode.com/problems/recover-binary-search-tree/

99. Recover Binary Search Tree
If u use inorder traveral, problem will be find 2 mistakes in acending array and swap them
For example array: 1 2 3 4 5 6 7
-> swap random two elments -> 1 2 6 4 5 3 7 (swap 3 and 6)
-> Question is how can know 2 elements is 3 and 6?
-> First: find the first number have index i satisfy arr[i - 1] > arr[i] => first mistake have index i - 1 (in the exam, first mistake is 6)
-> Second: continue but don't change first mistake, if arr[i - 1] > arr[i] and u had found the first mistake => second mistake is i;
in the example second mistake in the first time is 4 change to 3

In the tree question, to keep compare, u need a variable is previous root.


Inorder traversal, non-recursive
    public void recoverTree(TreeNode root) {
        // stack of storage nodes
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;// previous node
        TreeNode first = null;// first wrong node
        TreeNode second = null;// second wrong node
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            if (!stack.isEmpty()) {
                root = stack.pop();

                if (first == null && pre != null && pre.val > root.val) {
                    first = pre;
                }
                if (first != null && pre.val > root.val) {
                    second = root;
                }
                pre = root;

                root = root.right;
            }
        }

        // Swap the values of two nodes
        int tmp = first.val;
        first.val = second.val;
        second.val = tmp;
    }

Inorder traversal, recursive way

    private TreeNode pre;// previous node
    private TreeNode first;// first wrong node
    private TreeNode second;// second wrong node

    public void recoverTree(TreeNode root) {
        // recursive inorder traversal
        inorder(root);

        // Swap the values of two nodes
        int tmp = first.val;
        first.val = second.val;
        second.val = tmp;
    }

    // recursive inorder traversal
    private void inorder(TreeNode root) {
        if (root == null)
            return;
        // Traverse the left child node
        inorder(root.left);

        if (first == null && pre != null && pre.val > root.val) {
            first = pre;
        }
        if (first != null && pre.val > root.val) {
            second = root;
        }
        pre = root;

        // Traverse the right child node
        inorder(root.right);
    }
