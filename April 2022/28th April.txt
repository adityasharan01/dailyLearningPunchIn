

1202. Smallest String With Swaps

class Solution {
    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
        int n = s.length();
        int[] parent = new int[n];
        char[] c = s.toCharArray();
        
        for(int i = 0; i < n; i++) {
            parent[i] = i;
        }
        
        for(List<Integer> e: pairs) {
            union(parent, e.get(0), e.get(1));
        }
        
        Map<Integer, List<Integer>> iMap = new HashMap<>();
        Map<Integer, List<Character>> cMap = new HashMap<>();
        
        for(int i = 0; i < n; i++) {
            int p = find(parent, parent[i]);
            iMap.putIfAbsent(p, new ArrayList<>());
            cMap.putIfAbsent(p, new ArrayList<>());
            iMap.get(p).add(i);
            cMap.get(p).add(c[i]);
        }
        
        for(Map.Entry<Integer, List<Character>> e : cMap.entrySet()) {
            List<Character> cList = e.getValue();
            List<Integer> iList = iMap.get(e.getKey());
            Collections.sort(cList, (a, b) -> a - b);
            
            for(int i = 0; i < cList.size(); i++) {
                c[iList.get(i)] = cList.get(i);
            }
        }
        
        return new String(c);
    }
    
    private void union(int[] parent, int a, int b) {
        parent[find(parent, b)] = parent[find(parent, a)];
    }
    
    private int find(int[] parent, int a) {
        if(a != parent[a]) {
            parent[a] = find(parent, parent[a]);
        }
        
        return parent[a];
    }
}
